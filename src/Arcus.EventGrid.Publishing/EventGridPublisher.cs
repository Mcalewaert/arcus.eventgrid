using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Arcus.EventGrid.Contracts;
using Flurl.Http;

namespace Arcus.EventGrid.Publishing
{
    using Guard;

    /// <summary>
    ///     Event Grid publisher can be used to publish events to a custom Event Grid topic
    /// </summary>
    public class EventGridPublisher
    {
        /// <summary>
        ///     Constructor
        /// </summary>
        /// <param name="topicEndpoint">Url of the custom Event Grid topic</param>
        /// <param name="authenticationKey">Authentication key for the custom Event Grid topic</param>
        private EventGridPublisher(string topicEndpoint, string authenticationKey)
        {
            Guard.NotNullOrWhitespace(topicEndpoint, nameof(topicEndpoint), "The topic endpoint must not be empty and is required");
            Guard.NotNullOrWhitespace(authenticationKey, nameof(authenticationKey), "The authentication key must not be empty and is required");

            TopicEndpoint = topicEndpoint;
            AuthenticationKey = authenticationKey;
        }

        /// <summary>
        ///     Url of the custom Event Grid topic
        /// </summary>
        public string TopicEndpoint { get; }

        /// <summary>
        ///     Authentication Key for the Event Grid topic
        /// </summary>
        private string AuthenticationKey { get; }

        /// <summary>
        ///     Creates a validated EventGrid publisher
        /// </summary>
        /// <param name="topicEndpoint">Url of the custom Event Grid topic</param>
        /// <param name="authenticationKey">Authentication key for the custom Event Grid topic</param>
        public static EventGridPublisher Create(string topicEndpoint, string authenticationKey)
        {
            Guard.NotNullOrWhitespace(topicEndpoint, nameof(topicEndpoint), "The topic endpoint must not be empty and is required");
            Guard.NotNullOrWhitespace(authenticationKey, nameof(authenticationKey), "The authentication key must not be empty and is required");

            var eventGridPublisher = new EventGridPublisher(topicEndpoint, authenticationKey);
            return eventGridPublisher;
        }

        /// <summary>
        ///     Publish an event grid message to the configured Event Grid topic
        /// </summary>
        /// <typeparam name="TData">Type of the specific EventData</typeparam>
        /// <param name="subject">Subject</param>
        /// <param name="eventType">Event Type</param>
        /// <param name="data">Typed event data</param>
        /// <param name="id">Unique id of the event, generated by default</param>
        /// <returns></returns>
        public async Task Publish<TData>(string subject, string eventType, IEnumerable<TData> data, string id = null)
        {
            Guard.NotNullOrWhitespace(subject, nameof(subject), "No subject was specified");
            Guard.NotNullOrWhitespace(eventType, nameof(eventType), "No event type was specified");
            Guard.NotNull(data, nameof(data), "No events were specified");
            Guard.For(() => data.Any() == false, new ArgumentException("No events were specified", nameof(data)));

            List<Event<TData>> eventList = ComposeEventList(subject, eventType, data, id);

            // TODO: Add resiliency here
            // Calling HTTP endpoint
            var response = await TopicEndpoint
                .WithHeader(name: "aeg-sas-key", value: AuthenticationKey)
                .PostJsonAsync(eventList);

            if (!response.IsSuccessStatusCode)
            {
                await ThrowApplicationExceptionAsync(response);
            }
        }

        private List<Event<TData>> ComposeEventList<TData>(string subject, string eventType, IEnumerable<TData> dataEntries, string id)
        {
            IEnumerable<Event<TData>> events = dataEntries.Select(data =>
            {
                var eventId = id ?? Guid.NewGuid().ToString();
                var eventData = new Event<TData>
                {
                    Subject = subject,
                    EventType = eventType,
                    EventTime = DateTime.UtcNow,
                    Id = eventId,
                    Data = data
                };

                return eventData;
            });

            return events.ToList();
        }

        private async Task ThrowApplicationExceptionAsync(HttpResponseMessage response)
        {
            var rawResponse = string.Empty;

            try
            {
                rawResponse = await response.Content.ReadAsStringAsync();
            }
            finally
            {
                // Throw custom exception in case of failure
                throw new ApplicationException($"Event grid publishing failed with status {response.StatusCode} and content {rawResponse}");
            }
        }
    }
}