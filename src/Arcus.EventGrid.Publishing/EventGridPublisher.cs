using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Arcus.EventGrid.Contracts;
using Arcus.EventGrid.Publishing.Interfaces;
using Flurl.Http;
using GuardNet;
using Polly;

namespace Arcus.EventGrid.Publishing
{
    /// <summary>
    ///     Event Grid publisher can be used to publish events to a custom Event Grid topic
    /// </summary>
    public class EventGridPublisher : IEventGridPublisher
    {
        private readonly Policy _resilientPolicy;
        private readonly string _authenticationKey;

        /// <summary>
        ///     Constructor
        /// </summary>
        /// <param name="topicEndpoint">Url of the custom Event Grid topic</param>
        /// <param name="authenticationKey">Authentication key for the custom Event Grid topic</param>
        internal EventGridPublisher(string topicEndpoint, string authenticationKey)
            : this(topicEndpoint, authenticationKey, Policy.NoOpAsync())
        {
        }

        /// <summary>
        ///     Constructor
        /// </summary>
        /// <param name="topicEndpoint">Url of the custom Event Grid topic</param>
        /// <param name="authenticationKey">Authentication key for the custom Event Grid topic</param>
        /// <param name="resilientPolicy">The policy to use making the publishing resilient.</param>
        internal EventGridPublisher(string topicEndpoint, string authenticationKey, Policy resilientPolicy)
        {
            Guard.NotNullOrWhitespace(topicEndpoint, nameof(topicEndpoint), "The topic endpoint must not be empty and is required");
            Guard.NotNullOrWhitespace(authenticationKey, nameof(authenticationKey), "The authentication key must not be empty and is required");
            Guard.NotNull(resilientPolicy, nameof(resilientPolicy), "The resilient policy is required with this construction, otherwise use other constructor");

            TopicEndpoint = topicEndpoint;

            _authenticationKey = authenticationKey;
            _resilientPolicy = resilientPolicy;
        }

        /// <summary>
        ///     Url of the custom Event Grid topic
        /// </summary>
        public string TopicEndpoint { get; }

        /// <summary>
        ///     Creates a validated EventGrid publisher
        /// </summary>
        /// <param name="topicEndpoint">Url of the custom Event Grid topic</param>
        /// <param name="authenticationKey">Authentication key for the custom Event Grid topic</param>
        [Obsolete("Use the EventGridPublisherBuilder instead to create EventGridPublisher models")]
        public static EventGridPublisher Create(string topicEndpoint, string authenticationKey)
        {
            Guard.NotNullOrWhitespace(topicEndpoint, nameof(topicEndpoint), "The topic endpoint must not be empty and is required");
            Guard.NotNullOrWhitespace(authenticationKey, nameof(authenticationKey), "The authentication key must not be empty and is required");

            var eventGridPublisher = new EventGridPublisher(topicEndpoint, authenticationKey);
            return eventGridPublisher;
        }

        /// <summary>
        ///     Publish an event grid message to the configured Event Grid topic
        /// </summary>
        /// <typeparam name="TData">Type of the specific EventData</typeparam>
        /// <param name="subject">Subject</param>
        /// <param name="eventType">Event Type</param>
        /// <param name="data">Typed event data</param>
        /// <param name="id">Unique id of the event, generated by default</param>
        /// <returns></returns>
        public async Task Publish<TData>(string subject, string eventType, IEnumerable<TData> data, string id = null)
        {
            Guard.NotNullOrWhitespace(subject, nameof(subject), "No subject was specified");
            Guard.NotNullOrWhitespace(eventType, nameof(eventType), "No event type was specified");
            Guard.NotNull(data, nameof(data), "No events were specified");
            Guard.For(() => data.Any() == false, new ArgumentException("No events were specified", nameof(data)));

            IEnumerable<Event<TData>> eventList = ComposeEventList(subject, eventType, data, id);

            HttpResponseMessage response =
                await _resilientPolicy.ExecuteAsync(
                    () => SendAuthorizedHttpPostRequest(eventList));

            if (!response.IsSuccessStatusCode)
            {
                await ThrowApplicationExceptionAsync(response);
            }
        }

        private static IEnumerable<Event<TData>> ComposeEventList<TData>(
            string subject, 
            string eventType, 
            IEnumerable<TData> dataEntries, 
            string id)
        {
            IEnumerable<Event<TData>> events = dataEntries.Select(data =>
            {
                string eventId = id ?? Guid.NewGuid().ToString();
                var eventData = new Event<TData>
                {
                    Subject = subject,
                    EventType = eventType,
                    EventTime = DateTime.UtcNow,
                    Id = eventId,
                    Data = data
                };

                return eventData;
            });

            return events.ToList();
        }

        private Task<HttpResponseMessage> SendAuthorizedHttpPostRequest<TData>(IEnumerable<Event<TData>> eventList)
        {
            return TopicEndpoint.WithHeader(name: "aeg-sas-key", value: _authenticationKey)
                                .PostJsonAsync(eventList);
        }

        private static async Task ThrowApplicationExceptionAsync(HttpResponseMessage response)
        {
            string rawResponse = string.Empty;

            try
            {
                rawResponse = await response.Content.ReadAsStringAsync();
            }
            finally
            {
                // Throw custom exception in case of failure
                throw new ApplicationException($"Event grid publishing failed with status {response.StatusCode} and content {rawResponse}");
            }
        }
    }
}